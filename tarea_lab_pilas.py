# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lCt5QlGRnS1o8czZUfC7SQ_kESq0F-oz
"""

class Pila:

    class Nodo:
        def __init__(self, dato):
            self.dato = dato
            self.siguiente = None

    def __init__(self):
        self.cima = None

    def apilar(self, dato):
        if self.cima == None:
            self.cima = self.Nodo(dato)
            return
        nuevo_nodo = self.Nodo(dato)
        nuevo_nodo.siguiente = self.cima
        self.cima = nuevo_nodo

    def desapilar(self):
        if self.cima == None:
            return
        self.cima = self.cima.siguiente

    def imprimir(self):
        elemento = ""
        nodo_temporal = self.cima
        elementos = []
        while nodo_temporal != None:
            elementos.append(nodo_temporal.dato)
            nodo_temporal = nodo_temporal.siguiente
        return elementos

    def tamanio(self):
      contador = 0
      nodo_temporal = self.cima
      while nodo_temporal != None:
        contador += 1
        nodo_temporal = nodo_temporal.siguiente

      return contador

    def sima(self):
      if self.cima == None:
        return None
      return self.cima.dato

    def limpiar_pila(self):
      self.cima = None

pila = Pila()
pila.apilar(1)
pila.apilar(2)
pila.apilar(3)
pila.apilar(4)
pila.apilar(5)
pila.apilar(6)
pila.apilar(7)
pila.apilar(8)
pila.apilar(9)
pila.apilar(20)
pila.apilar(30)

print('Pila: ', pila.imprimir())

print('Tamaño: ', pila.tamanio())

print('Cima: ', pila.sima())

pila.limpiar_pila()
pila.apilar(5)
pila.apilar(6)
pila.apilar(4)
pila.apilar(3)

print('Pila: ', pila.imprimir())

print('Tamaño: ', pila.tamanio())

print('Cima: ', pila.sima())

class Nodo:
    def __init__(self,dato):
      self.dato=dato
      self.enlace=None

class Pila:
  def __init__(self):
    self.cima=None

  def EnPilar(self, dato):
    self.nuevoNodo=Nodo(dato)
    if self.cima!=None:
       self.nuevoNodo.enlace=self.cima
    self.cima=self.nuevoNodo

  def DesEmpilar(self):
    aux=self.cima
    if aux.enlace!=None:
      self.cima=aux.enlace
      aux.enlace=None
    else:
      self.cima=None

  def tamanio(self):
      contador = 0
      nodo_temporal = self.cima
      while nodo_temporal != None:
        contador += 1
        nodo_temporal = nodo_temporal.enlace
      return contador

  def pilaVacia(self):
    return self.cima==None

  def limpiaPila(self):
    self.cima = None

  def sima(self):
    if self.cima == None:
      return None
    return self.cima.dato

  def imprimir_pila(self):
    aux=self.cima
    while aux!=None:
      print(aux.dato)
      aux=aux.enlace

miPilita = Pila()
miPilita.EnPilar(20)
miPilita.EnPilar(30)
miPilita.EnPilar(50)
miPilita.EnPilar(70)
miPilita.EnPilar(80)
miPilita.EnPilar(100)

print("------------------------")
print("La pila es:")
miPilita.imprimir_pila()
miPilita.DesEmpilar()
print("------------------------")
print("La nueva pila es:")
miPilita.imprimir_pila()
print("------------------------")
print("La pila esta vacia?",miPilita.pilaVacia())
print("El valor que esta en la cima es:",miPilita.sima())
print("El tamaño de la pila es:",miPilita.tamanio())
miPilita.limpiaPila()