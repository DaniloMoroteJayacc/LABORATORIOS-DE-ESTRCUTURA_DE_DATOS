# -*- coding: utf-8 -*-
"""TAREA 03 EDD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ESYZQkVgcU6D-cdgbra0CgE6XBYJ9WBe
"""

numeros = set(range(1, 551))
num_1_100 = set(range(1, 101))
num_75_125 = set(range(75, 126))
numeros_desordenados = {54, 12, 39, 76, 20, 43, 88, 9, 33, 65, 17, 91, 27, 5, 48, 70, 14, 61, 22, 83}
numeros_repetidos = {5, 12, 8, 5, 20, 12, 34, 8, 7, 20, 16, 34, 3, 7, 9, 16, 2, 18, 2, 18}
palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra",u "ulan", "redat", "sapo", "lipo"
}

""" 1.Escriba una función que reciba un conjunto de números y devuelva un conjunto con los números primos."""

numeros = set(range(1, 551))

def primos(numeros):
  primo = set()
  for numero in numeros:
    if numero > 1:
      for i in range(2, numero):
        if numero % i == 0:
          break
      else:
        primo.add(numero)
  return primo

print("son primos:",primos(numeros))

"""2. Escriba una función que reciba un conjunto de palabras y devuelva un conjunto con las palabras que comienzan con una letra determinada."""

palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra", "ulan", "redat", "sapo", "lipo"
}

def ini_palabra(palabras, letra):
  palabras_encontradas = set()
  for palabra in palabras:
    if palabra[0] == letra.lower():
      palabras_encontradas.add(palabra)
  return palabras_encontradas

print(ini_palabra(palabras, 'c'))

"""3. Escriba una función que reciba un conjunto de números y devuelva un conjunto con los números que son divisibles por un número determinado."""

numeros = set(range(1, 551))

def divisible_por(numeros, n):
  divisibles = set()
  for numero in numeros:
    if numero % n == 0:
      divisibles.add(numero)
  return divisibles

print(divisible_por(numeros, 50))

"""4.Escriba una función que reciba dos conjuntos de números y devuelva un conjunto con los números que están en ambos conjuntos."""

num_1_100 = set(range(1, 101))
num_75_125 = set(range(75, 126))

def interseccion(conjunto1, conjunto2):
  interseccion = set()
  for numero in conjunto1:
    if numero in conjunto2:
      interseccion.add(numero)
  return interseccion

print(interseccion(num_1_100, num_75_125))

"""5. Escriba una función que reciba dos conjuntos de números y devuelva un conjunto con los números que están en el primer conjunto pero no en el segundo."""

num_1_100 = set(range(1, 101))
num_75_125 = set(range(75, 126))

def primero_no_segundo(conjunto1, conjunto2):
  datos = set()
  for numero in conjunto1:
    if numero not in conjunto2:
      datos.add(numero)
  return datos

print(primero_no_segundo(num_1_100, num_75_125))

"""6. Escriba una función que reciba dos conjuntos de números y devuelva un conjunto con los números que están en el segundo conjunto pero no en el primero."""

num_1_100 = set(range(1, 101))
num_75_125 = set(range(75, 126))

def segundo_no_primero(conjunto1, conjunto2):
  datos = set()
  for numero in conjunto2:
    if numero not in conjunto1:
      datos.add(numero)
  return datos

print(segundo_no_primero(num_1_100, num_75_125))

"""7. Escriba una función que reciba un conjunto de palabras y devuelva un conjunto con las palabras que son anagramas."""

palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra", "ulan", "redat", "sapo", "lipo"
}

def anagrama(palabras):
  anagramas = set()
  palabras = list(palabras)
  for i in range(len(palabras)):
    pal_ordenada = tuple(sorted(palabras[i]))

    temporal = [palabras[i]]

    for j in range(i , len(palabras)):
        if palabras[j] != palabras[i] and tuple(sorted(palabras[j])) == pal_ordenada:
            temporal.append(palabras[j])

    if len(temporal) > 1:
        anagramas.add(tuple(temporal))

  return anagramas

print(anagrama(palabras))

"""8. Escriba una función que reciba un conjunto de palabras y devuelva un conjunto con las palabras que son palíndromos."""

palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra", "ulan", "redat", "sapo", "lipo"
}

def palindromo(palabras):
  palindromos = set()
  for palabra in palabras:
    if palabra == palabra[::-1]:
      palindromos.add(palabra)

  return palindromos

print(palindromo(palabras))

"""9. Escriba una función que reciba un conjunto de palabras y devuelva un conjunto con las palabras que tienen una longitud determinada."""

palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra", "ulan", "redat", "sapo", "lipo"
}

def long_palabra(palabras, n):
  resultados = set()
  for palabra in palabras:
    if len(palabra) == n:
      resultados.add(palabra)
  return resultados

print(long_palabra(palabras, 4))

"""10. Escriba una función que reciba un conjunto de palabras y devuelva un conjunto con las palabras que contienen una letra determinada."""

palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra", "ulan", "redat", "sapo", "lipo"
}

def pal_contienen(palabras, l):
  palabras_encontradas = set()
  for palabra in palabras:
    if l in palabra:
      palabras_encontradas.add(palabra)
  return palabras_encontradas

print(pal_contienen(palabras, 'g'))

"""11. Escriba una función que reciba un conjunto de números y devuelva un conjunto con los números que están ordenados de menor a mayor."""

numeros_desordenados = {54, 12, 39, 76, 20, 43, 88, 9, 33, 65, 17, 91, 27, 5, 48, 70, 14, 61, 22, 83}

def menor_mayor(numeros):
  ordenados = set()
  copia_numeros = numeros.copy()

  while copia_numeros:
    menor = min(copia_numeros)
    copia_numeros.remove(menor)
    ordenados.add(menor)

  return ordenados

print(menor_mayor(numeros_desordenados))

"""13. Escriba una función que reciba un conjunto de números y devuelva un conjunto con los números que están duplicados."""

numeros_desordenados = {54,54,12,40,41, 12, 39, 20, 20}

def numeros_no_duplicados(conjunto_numeros):
  numeros = set()
  duplicados = set()

  for numero in conjunto_numeros:
    if numero in numeros:
        duplicados.add(numero)
    else:
      numeros.add(numero)

  numeros_no_duplicados = numeros - duplicados
  return numeros_no_duplicados

print(numeros_no_duplicados(numeros_desordenados))

"""15. Escriba una función que reciba un conjunto de números y devuelva un conjunto con los números que son primos y están ordenados de menor a mayor."""

numeros_desordenados = {54, 12, 39, 76, 20, 43, 88, 9, 33, 65, 17, 91, 27, 5, 48, 70, 14, 61, 22, 83}

def primos_menor_mayor(numeros):
  primos = set()
  copia_numeros = numeros.copy()

  while copia_numeros:
    numero = min(copia_numeros)
    copia_numeros.remove(numero)
    if numero > 1:
      for i in range(2, numero):
        if numero % i == 0:
          break
      else:
        primos.add(numero)

  primos_ordenados = set()
  copia_primos = primos.copy()
  while copia_primos:
    menor = min(copia_primos)
    primos_ordenados.add(menor)
    copia_primos.remove(menor)

  return primos_ordenados

print(primos_menor_mayor(numeros_desordenados))

"""17. Escriba una función que reciba un conjunto de palabras y devuelva un conjunto con las palabras que tienen una longitud determinada y están ordenadas de menor a mayor."""

palabras = {
    "oso", "casa", "perro", "amor", "sopa", "reconocer", "sol", "luz", "arroz", "rama",
    "madam", "anagrama", "ala", "mar", "rotor", "palabra", "avión", "gato", "manzana", "calle",
    "ratón", "elefante", "civic", "cine", "silla", "techo", "piso", "arriba", "mango", "murciélago",
    "zorro", "mamá", "reconstruir", "torta", "séptimo", "limón", "cuchara", "amarillo", "pájaro",
    "montaña", "isla", "león", "arcoiris", "escalera", "bailarina", "futuro", "campana", "caracol",
    "rescoldo", "cordones", "saca", "ater", "roper", "margana", "omara", "tanos", "roñat",
    "same", "casca", "pare", "savo", "auga", "mogna", "trona", "laglo", "magro", "doda",
    "tatro", "cobra", "ulan", "redat", "sapo", "lipo"
}

def palabras_me_ma_long(palabras, n):
  palabras_long = set()
  resultado = set()
  copia_palabras = palabras.copy()

  for palabra in copia_palabras:
    if len(palabra) == n:
      palabras_long.add(palabra)

  while palabras_long:
    menor = min(palabras_long)
    print(menor)
    palabras_long.remove(menor)
    resultado.add(menor)

  return resultado

print(palabras_me_ma_long(palabras, 7))

"""ESCRIBIR UNA FUNCION QUE RECIBA UN CONJUNTO DE PALABRAS Y UN NUMERO "N", Y DEVUELVA UN CONJUNTO CON LAS PALABRAS QUE CONTIENEN EXACTAMENTE "N" VOCALES."""

n=int(input("Ingrese la cantidad de vocales que desea buscar:"))

palabras = {"oso", "casa", "perro", "amor", "sopa", "reconocer",
"danilo","morote","alguna","drasticamente","alucina","as","hoy"}
def num_vocales_palabra(palabras, n):
    resultado = set()
    vocales = 'aeiouáéíóú'
    for palabra in palabras:
        num_voc = 0
        for caracter in palabra:
            if caracter in vocales:
                num_voc += 1
        if num_voc == n:
            resultado.add(palabra)
    return resultado


print("Las palabra son:",num_vocales_palabra(palabras, n))

edad=18
assert 18 <= edad, "La edad no es valida !!!"

print("Eres mayor de edad !!! ")

variable = 3

assert isinstance(variable, int), "La variable no es de tipo entero (int)"

print("La variable es de tipo entero (int)")

def validar_calificacion(calificacion):
    assert 0 <= calificacion <= 20, "La calificación debe estar en el rango de 0 a 20"

calificacion = 15
validar_calificacion(calificacion)
print("La calificación es válida.")

mi_lista = [1,2,3,4]

assert len(mi_lista) > 0, "La lista está vacía"

print("La lista no está vacía")

objeto1 = [1, 2, 3]
objeto2 = [1, 2, 3]

assert objeto1 == objeto2, "Los objetos no son iguales"

print("Los objetos son iguales")

ejecutado_al_menos_una_vez = False

while not ejecutado_al_menos_una_vez:
    print("El ciclo se ha ejecutado al menos una vez")
    ejecutado_al_menos_una_vez = True

assert ejecutado_al_menos_una_vez, "El ciclo no se ejecutó al menos una vez"

print("El ciclo se ejecutó al menos una vez")

def producto(a, b):
    return a * b

assert producto (2, 3) == 6, "El producto de 2 y 3 debería ser 6"

assert producto(5, -2) == -10, "El producto de 5 y -2 debería ser -10"

print("Las verificaciones pasaron correctamente.")

def encontrar_subcadena(cadena, subcadena):
    indices = []
    longitud_cadena = len(cadena)
    longitud_subcadena = len(subcadena)

    for i in range(longitud_cadena - longitud_subcadena + 1):
        if cadena[i:i+longitud_subcadena] == subcadena:
            indices.append(i)

    return indices

cadena = "abracadabra"
subcadena = "abra"
indices_encontrados = encontrar_subcadena(cadena, subcadena)
print("Los índices de la subcadena 'abra' en la cadena 'abracadabra' son:", indices_encontrados)

import numpy as np

def buscar_nombre(matriz, nombre_buscado):
    matriz_np = np.array(matriz)
    ubicaciones = np.where(matriz_np == nombre_buscado)
    filas, columnas = ubicaciones
    ubicaciones_encontradas = list(zip(filas, columnas))
    return ubicaciones_encontradas

# Ejemplo de uso
matriz_nombres = [
    ["Juan", "María", "Pedro"],
    ["Ana", "Juan", "Carlos"],
    ["Laura", "Pedro", "María"]
]

nombre_buscado = "Juan"
ubicaciones = buscar_nombre(matriz_nombres, nombre_buscado)
print(f"El nombre '{nombre_buscado}' se encuentra en las siguientes ubicaciones:")
for ubicacion in ubicaciones:
    print(f"Fila: {ubicacion[0]}, Columna: {ubicacion[1]}")

def valores_a_cadena(diccionario):
    valores = [str(valor) for valor in diccionario.values()]
    cadena_valores = ', '.join(valores)
    return cadena_valores

# Ejemplo de uso
mi_diccionario = {'a': 1, 'b': 2, 'c': 3}
cadena_resultante = valores_a_cadena(mi_diccionario)
print("Cadena de valores del diccionario:", cadena_resultante)

def calcular_area_cuadrado(lado):
    assert lado > 0, "El lado del cuadrado debe ser un valor positivo"
    area = lado * lado
    return area

# Ejemplo de uso
lado = 5
area = calcular_area_cuadrado(lado)
print("El área del cuadrado con lado", lado, "es:", area)

def contar_elementos_tupla(tupla):
    contador = 0

    for elemento in tupla:
        if isinstance(elemento, float):
            contador += 1

    return contador

mi_tupla = (1.2, 5, 2.7, 5, 4.4)
cantidad_elementos = contar_elementos_tupla(mi_tupla)
print("La cantidad de elementos flotantes en la tupla es:", cantidad_elementos)

def calcular_promedio(notas):
    if len(notas) == 0:
        return 0

    suma_notas = sum(notas)
    promedio = suma_notas / len(notas)
    return promedio

notas = [13.5, 10.9, 13.2, 15.8, 8.0]
promedio_notas = calcular_promedio(notas)
print("El promedio de las notas es:", promedio_notas)