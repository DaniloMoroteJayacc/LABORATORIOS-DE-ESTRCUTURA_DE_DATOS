# -*- coding: utf-8 -*-
"""PRIMERA TAREA LAB EDD .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V_tl9UksojXopO8ZB-n-aZA2TRGS83vv
"""

n1=int(input("introduce el primer numero:"))
n2=int(input("introduce el segundo numero:"))

suma=n1+n2
resta=n1-n2
multi=n1*n2
divi=n1/n2
print("la suma es:",suma)
print("la resta es:",resta)
print("la multiplicaion es:",multi)
print("la division es:",divi)

n=int(input("introduce un numero:"))

if(n%2 ==0):
  print("el numero es par")
else:
  print("el numero es impar")

b=int(input("introduce la base del triangulo:"))
h=int(input("introduce la altura del triangulo:"))

area= (b*h)/2

print("El area del triangulo es:",area)

n=int(input("introduce un numero:"))
def factorial(n):
  if n==0:
    return 1
  else:
    return n*factorial(n-1)

print("el factorial es:",factorial(n))

n=int(input("introduce un numero:"))
def es_primo(n):
  for i in range(2,n):
    if (n%i) == 0:
      return False
  return True

print("el numero ingresado es primo ?:",es_primo(n))

def invertir_cadena(cadena):
    cadena_invertida = cadena[::-1]
    return cadena_invertida

cadena_original = input("Ingresa una cadena de texto: ")
cadena_invertida = invertir_cadena(cadena_original)

print("Cadena original:", cadena_original)
print("Cadena invertida:", cadena_invertida)

def suma_pares_en_rango(inicio, fin):
    suma = 0
    for numero in range(inicio, fin + 1):
        if numero % 2 == 0:  # Verificar si el número es par
            suma += numero
    return suma

# Solicitar al usuario que ingrese el rango
inicio_rango = int(input("Ingresa el inicio del rango: "))
fin_rango = int(input("Ingresa el fin del rango: "))

# Calcular la suma de los números pares en el rango utilizando la función
resultado = suma_pares_en_rango(inicio_rango, fin_rango)

# Mostrar el resultado
print("La suma de los números pares en el rango de:",inicio_rango,"a" ,fin_rango, "es:" ,resultado)

def calcular_cuadrados():
    # Crear una lista de los cuadrados de los primeros 10 números naturales
    cuadrados = [i**2 for i in range(1, 11)]
    return cuadrados

# Llamar a la función para obtener la lista de cuadrados
lista_cuadrados = calcular_cuadrados()

# Mostrar la lista de cuadrados
print("Lista de cuadrados de los primeros 10 números naturales:", lista_cuadrados)

def contar_vocales(cadena):
    # Inicializar un contador de vocales
    contador = 0
    # Definir una lista de vocales
    vocales = "aeiouAEIOU"
    # Iterar sobre cada caracter en la cadena
    for caracter in cadena:
        # Verificar si el caracter es una vocal
        if caracter in vocales:
            contador += 1

    return contador

# Solicitar al usuario que ingrese una cadena de texto
cadena_ingresada = input("Ingresa una cadena de texto: ")

# Llamar a la función para contar vocales en la cadena ingresada
cantidad_vocales = contar_vocales(cadena_ingresada)

# Mostrar el resultado
print("El número de vocales en la cadena es:",cantidad_vocales)

def fibonacci(n):
    # Inicializar una lista para almacenar la serie Fibonacci
    serie = []

    # Caso base para n = 0
    if n > 0:
        serie.append(0)

    # Caso base para n = 1
    if n > 1:
        serie.append(1)

    # Generar la serie Fibonacci hasta el n-2-ésimo término
    while len(serie) < n:
        siguiente_numero = serie[-1] + serie[-2]
        serie.append(siguiente_numero)

    return serie

# Solicitar al usuario la cantidad de términos deseados en la serie Fibonacci
n = int(input("Ingrese el número de términos en la serie Fibonacci que desea generar: "))

# Llamar a la función para generar la serie Fibonacci
resultado = fibonacci(n)

print(f"Serie Fibonacci de los primeros {n} términos:", resultado)

def ordenar_lista():
    # Solicitar al usuario ingresar una lista de números separados por espacios
    numeros_str = input("Ingresa una lista de números separados por espacios: ")

    # Convertir la cadena de números a una lista de enteros
    numeros = [int(num) for num in numeros_str.split()]

    # Ordenar la lista de números de menor a mayor
    numeros_ordenados = sorted(numeros)

    return numeros_ordenados

# Llamar a la función para obtener la lista ordenada
lista_ordenada = ordenar_lista()

print("Lista ordenada de menor a mayor:", lista_ordenada)

def tabla_multiplicar(n, m=1):
    if m <= 12:
        print(f"{n} x {m} = {n * m}")
        tabla_multiplicar(n, m + 1)

numero_elejido=int(input("ingrese el numero a generar la tabla:"))
tabla_numero_elejido=tabla_multiplicar(numero_elejido)

print(tabla_numero_elejido)