# -*- coding: utf-8 -*-
"""LABORATORIO 12-13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RlXNuZRZeTCYkXrh2sWY295s7QpqTWFg

verificar si una palabra es palíndroma
"""

class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        else:
            return None

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)


def is_palindrome(word):
    queue = Queue()

    # Agregar cada caracter de la palabra a la cola
    for char in word:
        queue.enqueue(char)

    # Construir la palabra en reverso
    reverse_word = ""
    while not queue.is_empty():
        reverse_word += queue.dequeue()

    # Comparar la palabra original con la reversa para determinar si es palíndroma
    return word == reverse_word


# Ejemplo de uso
word = "danilo"
if is_palindrome(word):
    print(f"{word} es palíndroma.")
else:
    print(f"{word} no es palíndroma.")



class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.siguiente = None
        self.anterior = None

class ListaDoble:
    def __init__(self):
        self.cabeza = None

    def insertar_despues_de(self, valor_buscado, nuevo_valor):
        nuevo_nodo = Nodo(nuevo_valor)
        actual = self.cabeza
        while actual is not None:
            if actual.valor == valor_buscado:
                nuevo_nodo.siguiente = actual.siguiente
                nuevo_nodo.anterior = actual
                if actual.siguiente is not None:
                    actual.siguiente.anterior = nuevo_nodo
                actual.siguiente = nuevo_nodo
                return
            actual = actual.siguiente

    def imprimir_lista(self):
        actual = self.cabeza
        while actual is not None:
            print(actual.valor, end=" ")
            actual = actual.siguiente
        print()

# Ejemplo de uso
if __name__ == "__main__":
    lista = ListaDoble()
    lista.cabeza = Nodo(1)
    lista.cabeza.siguiente = Nodo(2)
    lista.cabeza.siguiente.anterior = lista.cabeza
    lista.cabeza.siguiente.siguiente = Nodo(3)
    lista.cabeza.siguiente.siguiente.anterior = lista.cabeza.siguiente

    print("Lista original:")
    lista.imprimir_lista()

    valor_buscado = 2
    nuevo_valor = 4
    lista.insertar_despues_de(valor_buscado, nuevo_valor)

    print("\nLista después de insertar", nuevo_valor, "después de", valor_buscado)
    lista.imprimir_lista()

class Nodo:
    def __init__(self, dato):
        self.dato = dato
        self.siguiente = None
        self.anterior = None

class ListaDoble:
    def __init__(self):
        self.cabeza = None

    def insertar_al_inicio(self, dato):
        nuevo_nodo = Nodo(dato)
        if self.cabeza is None:
            self.cabeza = nuevo_nodo
        else:
            nuevo_nodo.siguiente = self.cabeza
            self.cabeza.anterior = nuevo_nodo
            self.cabeza = nuevo_nodo

    def insertar_antes_de(self, dato_buscado, dato_nuevo):
        if self.cabeza is None:
            print("La lista está vacía")
            return

        nuevo_nodo = Nodo(dato_nuevo)
        actual = self.cabeza

        while actual:
            if actual.dato == dato_buscado:
                nuevo_nodo.siguiente = actual
                nuevo_nodo.anterior = actual.anterior
                if actual.anterior:
                    actual.anterior.siguiente = nuevo_nodo
                else:
                    self.cabeza = nuevo_nodo
                actual.anterior = nuevo_nodo
                return
            actual = actual.siguiente

        print(f"No se encontró el elemento {dato_buscado} en la lista")

    def imprimir_lista(self):
        actual = self.cabeza
        while actual:
            print(actual.dato, end=" <-> ")
            actual = actual.siguiente
        print("None")

# Ejemplo de uso
lista = ListaDoble()
lista.insertar_al_inicio(3)
lista.insertar_al_inicio(2)
lista.insertar_al_inicio(1)

print("Lista original:")
lista.imprimir_lista()

lista.insertar_antes_de(2, 2.5)

print("\nLista después de insertar 2.5 antes de 2:")
lista.imprimir_lista()

class Nodo:
    def __init__(self, dato):
        self.dato = dato
        self.siguiente = None
        self.anterior = None

class ListaDoble:
    def __init__(self):
        self.cabeza = None

    def insertar_al_inicio(self, dato):
        nuevo_nodo = Nodo(dato)
        if self.cabeza is None:
            self.cabeza = nuevo_nodo
        else:
            nuevo_nodo.siguiente = self.cabeza
            self.cabeza.anterior = nuevo_nodo
            self.cabeza = nuevo_nodo

    def eliminar_despues_de(self, dato_buscado):
        if self.cabeza is None or self.cabeza.siguiente is None:
            print("La lista está vacía o tiene solo un elemento")
            return

        actual = self.cabeza

        while actual:
            if actual.dato == dato_buscado and actual.siguiente:
                siguiente_nodo = actual.siguiente
                actual.siguiente = siguiente_nodo.siguiente
                if siguiente_nodo.siguiente:
                    siguiente_nodo.siguiente.anterior = actual
                del siguiente_nodo
                return
            actual = actual.siguiente

        print(f"No se encontró el elemento {dato_buscado} o es el último elemento de la lista")

    def imprimir_lista(self):
        actual = self.cabeza
        while actual:
            print(actual.dato, end=" <-> ")
            actual = actual.siguiente
        print("None")

# Ejemplo de uso
lista = ListaDoble()
lista.insertar_al_inicio(3)
lista.insertar_al_inicio(2)
lista.insertar_al_inicio(1)

print("Lista original:")
lista.imprimir_lista()

lista.eliminar_despues_de(1)

print("\nLista después de eliminar el elemento después de 1:")
lista.imprimir_lista()

class Nodo:
    def __init__(self, dato):
        self.dato = dato
        self.siguiente = None

class ListaSimple:
    def __init__(self):
        self.cabeza = None

    def insertar_antes_de(self, dato_buscado, dato_nuevo):

        if self.buscar(dato_nuevo):
            print("El dato nuevo ya está presente en la lista.")
            return

        if self.cabeza is None or self.cabeza.dato == dato_buscado:
            nuevo_nodo = Nodo(dato_nuevo)
            nuevo_nodo.siguiente = self.cabeza
            self.cabeza = nuevo_nodo
            return

        actual = self.cabeza
        while actual.siguiente is not None:
            if actual.siguiente.dato == dato_buscado:
                nuevo_nodo = Nodo(dato_nuevo)
                nuevo_nodo.siguiente = actual.siguiente
                actual.siguiente = nuevo_nodo
                return
            actual = actual.siguiente

        print(f"No se encontró el nodo con el dato {dato_buscado} en la lista.")

    def buscar(self, dato):
        actual = self.cabeza
        while actual:
            if actual.dato == dato:
                return True
            actual = actual.siguiente
        return False

    def imprimir_lista(self):
        actual = self.cabeza
        while actual:
            print(actual.dato, end=" -> ")
            actual = actual.siguiente
        print("None")

# Ejemplo de uso
lista = ListaSimple()
lista.insertar_antes_de(2, 1)
lista.insertar_antes_de(3, 2)
lista.insertar_antes_de(3, 4)  # Intenta insertar un valor que ya existe
lista.insertar_antes_de(2, 3)

print("Lista resultante:")
lista.imprimir_lista()

class Nodo:
    def __init__(self, dato):
        self.dato = dato
        self.siguiente = None

class ListaSimple:
    def __init__(self):
        self.cabeza = None

    def insertar_al_final(self, dato):
        nuevo_nodo = Nodo(dato)
        if self.cabeza is None:
            self.cabeza = nuevo_nodo
        else:
            actual = self.cabeza
            while actual.siguiente:
                actual = actual.siguiente
            actual.siguiente = nuevo_nodo

    def eliminar(self, dato):
        if self.cabeza is None:
            print("La lista está vacía.")
            return

        if self.cabeza.dato == dato:
            self.cabeza = self.cabeza.siguiente
            return

        anterior = self.cabeza
        actual = self.cabeza.siguiente

        while actual:
            if actual.dato == dato:
                anterior.siguiente = actual.siguiente
                return
            anterior = actual
            actual = actual.siguiente

        print(f"El elemento {dato} no se encontró en la lista.")

    def imprimir_lista(self):
        actual = self.cabeza
        while actual:
            print(actual.dato, end=" -> ")
            actual = actual.siguiente
        print("None")

# Ejemplo de uso
lista = ListaSimple()
lista.insertar_al_final(1)
lista.insertar_al_final(2)
lista.insertar_al_final(3)
lista.insertar_al_final(4)

print("Lista original:")
lista.imprimir_lista()

lista.eliminar(3)

print("\nLista después de eliminar el elemento 3:")
lista.imprimir_lista()



