# -*- coding: utf-8 -*-
"""TAREA ENCARGADA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ti5ybG3FgQA3L-BkYKjq3Lj14eztWhlU

1.Escribe una función recursiva que imprima los números pares del 1 al 100.
"""

def num_pares(n):
  if n == 1:
    return

  if n%2 == 0:
    print(n)
  num_pares(n-1)

num_pares(100)

"""2.Escribe una función recursiva que imprima la suma de los números del 1 al n.

"""

def suma(n):
  if n == 1:
    return 1
  return n + suma(n-1)

print(suma(100))

"""3.Escribe una función recursiva que imprima la pirámide de números del 1 al n."""

def piramide(i, n):
  if i == n:
    print(str(n)*n)
    return
  else :
    print(str(i)*i)
    piramide(i+1, n)
    return
print(piramide(1, 5))

"""4.Escribe una función recursiva que imprima la pirámide de números invertidos del 1 al n."""

def piramide_inv(n):
  if n == 1:
    print(n)
    return(n)
  else :
    print(str(n)*n)
    piramide_inv(n-1)
    return

print(piramide_inv(7))

"""5.Escribe una función recursiva que imprima la tabla de multiplicar del n."""

def tabla_multiplicar(n, m=1):
    if m <= 12:
        print(f"{n} x {m} = {n * m}")
        tabla_multiplicar(n, m + 1)

tabla_multiplicar(6)

"""6.Crea una matriz de números reales."""

import numpy as np

def matriz(n, m):
  return np.random.randint(100, size = (n, m))


print(matriz(3,3))

"""7.Crea una matriz de números complejos."""

import numpy as np

matriz = np.array([[1 + 2j, 3 + 4j], [5 + 6j, 7]])
print(matriz)

"""8.Crea una matriz de matrices."""

import numpy as np

matriz = np.array([[[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]],

                  [[10, 11, 12],
                   [13, 14, 15],
                   [16, 17, 18]]])
print(matriz)

"""9.Accede al elemento central de una matriz."""

import numpy as np

matriz = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])
print(matriz[int(len(matriz)/2)][int(len(matriz[0])/2)])

"""10.Suma dos matrices de diferentes tamaños."""

matriz1 = np.array([[1, 22, 3],
                    [4, 5, 26]])
matriz2 = np.array([[7, 8, 9],
                    [10, 11, 12]])
print(np.add(matriz1, matriz2))

"""11.Multiplica una matriz por un número."""

import numpy as np

def matriz_1(matriz, n):
  matriz_nueva = np.zeros((len(matriz), len(matriz)))
  for i in range(len(matriz)):
    for j in range(len(matriz[i])):
      matriz_nueva[i][j] = matriz[i][j] * n
  return matriz_nueva

matriz = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])

print(matriz_1(matriz, 4))

"""12.Calcula la media de los elementos de una matriz."""

import numpy as np

def matriz_media(matriz):
  return matriz.mean()

matriz = np.array([[10, 2, 3],
                    [4, 2, 6],
                    [7, 8, 9]])

print(matriz_media(matriz))

"""13.Crea una matriz de números aleatorios de tamaño 100x100."""

import numpy as np

def matriz_aleaoria(tamaño):
  return np.random.randint(10, size = (tamaño, tamaño))

print(matriz_aleaoria(20))

"""14.Calcula la media, la mediana y la desviación estándar de los elementos de una matriz."""

import numpy as np

def media_mediana_desviacion(matriz):
  media = np.mean(matriz)
  mediana = np.median(matriz)
  desviacion = np.std(matriz)
  return media, mediana, desviacion

media, mediana, desviacion = media_mediana_desviacion([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(f'media: {media}, mediana: {mediana}, desviacion estandar: {desviacion}')

"""15.Escribe una función que encuentre el elemento máximo de una matriz."""

import numpy as np

def elemento_maximo(matriz):
  elemento_maximo = matriz[0][0]
  for fila in matriz:
    for j in fila:
      if j > elemento_maximo:
        elemento_maximo = j
  return elemento_maximo

matriz = np.array([[11, 12, 3], [4, 15, 6], [7, 18, 9]])

print(elemento_maximo(matriz))